name: Deploy Template

on:
  workflow_call:
    inputs:
      NAME:
        description: 'Service name'
        required: true
        type: string
      DIRECTORY:
        description: 'Service directory'
        required: true   
        type: string
        
jobs:
  integration-tests:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      STORAGE_ACCESS_KEY: ${{ secrets.STORAGE_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v2
      - name: Build the stack
        run: |
          cp tests/integration/test.env ./.env
          echo -e "\nSTORAGE_ACCESS_KEY=${{ secrets.STORAGE_ACCESS_KEY }}" >> .env
          cat .env
          docker-compose -f docker-compose-prod.yml up --build -d
          sleep 10
      - name: Run the tests   
        uses: nick-fields/retry@v2
        with:
          max_attempts: 3
          retry_on: error
          timeout_seconds: 120
          command: |
            env
            cd tests/integration
            pip install -r requirements.txt
            pytest -s 

  deploy-service:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs: integration-tests
    runs-on: ubuntu-latest 
    env:
      NAME: "${{ inputs.NAME }}"
      DIRECTORY: "${{ inputs.DIRECTORY }}"    
      VERSION: ${{ github.run_id }}
      CONTAINER_REGISTRY: ${{ secrets.CONTAINER_REGISTRY }}
      REGISTRY_UN: ${{ secrets.REGISTRY_UN }}
      REGISTRY_PW: ${{ secrets.REGISTRY_PW  }}      
    steps:
      # Build and publish the image
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build image
        run: ./scripts/cd/image-build.sh
      - name: Publish image
        run: ./scripts/cd/image-push.sh

      # Installs Kubectl and connects it to the cluster.
      # https://github.com/marketplace/actions/kubernetes-cli-kubectl
      - name: Setup kubectl
        uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}
          kubectl-version: v1.29.4
      
      # Expands the configuration template and deploys the microservice.
      # - name: Deploy service
      #   run: ./scripts/cd/deploy.sh